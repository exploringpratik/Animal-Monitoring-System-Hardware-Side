
NRF_T.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080006a  0080006a  000007fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f6b  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f9  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b66  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00003e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ab9  00000000  00000000  00004367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00005e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  8a:	0c 94 ae 03 	jmp	0x75c	; 0x75c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <start_conversion>:
 *  Author: pesha
 */ 
#include "dht11.h"
void start_conversion()
{
	DDRC|=(1<<PINC0);//this will make PINC0 as output
  92:	a0 9a       	sbi	0x14, 0	; 20
	inputport &=~(1<<PINC0);//this will make output low along with delay for than 18 ms
  94:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	87 e2       	ldi	r24, 0x27	; 39
  98:	93 e2       	ldi	r25, 0x23	; 35
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <start_conversion+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <start_conversion+0xe>
  a0:	00 00       	nop
	_delay_ms(18);
	inputport |=(1<<PINC0);//this is responsible for making output of PINC0 high
  a2:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	9d e0       	ldi	r25, 0x0D	; 13
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <start_conversion+0x14>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <response>:
	_delay_us(20);
}
void response()
{
	DDRC &=~(1<<PINC0);//this is responsible for making PINC0 input pin
  ae:	a0 98       	cbi	0x14, 0	; 20
	PORTC|=(1<<PINC0);//this is making PINC0 internally high
  b0:	a8 9a       	sbi	0x15, 0	; 21
	while(PINC&0x01);//loop until PINC0 goes low
  b2:	98 99       	sbic	0x13, 0	; 19
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <response+0x4>
	while ( !(PINC&0X01));//loop until PINC0 goes high
  b6:	98 9b       	sbis	0x13, 0	; 19
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <response+0x8>
	while(PINC&0x01);//loop until PINC0 goes low
  ba:	98 99       	sbic	0x13, 0	; 19
  bc:	fe cf       	rjmp	.-4      	; 0xba <response+0xc>
}
  be:	08 95       	ret

000000c0 <receiving_data>:
uint8_t receiving_data()
{
  c0:	98 e0       	ldi	r25, 0x08	; 8
	char i;
	uint8_t data=0x00;//responsible for storing 8 bit data
  c2:	80 e0       	ldi	r24, 0x00	; 0
	for (i=0;i<8;i++)
	{
		while (!(PINC&0x01));//wait until signal coming in PINC0 is low
  c4:	98 9b       	sbis	0x13, 0	; 19
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <receiving_data+0x4>
  c8:	26 e1       	ldi	r18, 0x16	; 22
  ca:	2a 95       	dec	r18
  cc:	f1 f7       	brne	.-4      	; 0xca <receiving_data+0xa>
		_delay_us(33);//wait for 33 us as for logical zero signal is high for around 28 us and for logical one it is high for around 70 us
		if(PINC&0x01)//if signal is still high after 33 us then set last bit of data high by left shifting it
  ce:	98 9b       	sbis	0x13, 0	; 19
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <receiving_data+0x18>
		{
			data=(data<<1)|0x01;
  d2:	88 0f       	add	r24, r24
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <receiving_data+0x1a>
		}
		else
		{
			data=(data<<1)&0xfe;
  d8:	88 0f       	add	r24, r24
		}
		while(PINC&0x01);//wait until signal goes low
  da:	98 99       	sbic	0x13, 0	; 19
  dc:	fe cf       	rjmp	.-4      	; 0xda <receiving_data+0x1a>
  de:	91 50       	subi	r25, 0x01	; 1
}
uint8_t receiving_data()
{
	char i;
	uint8_t data=0x00;//responsible for storing 8 bit data
	for (i=0;i<8;i++)
  e0:	89 f7       	brne	.-30     	; 0xc4 <receiving_data+0x4>
			data=(data<<1)&0xfe;
		}
		while(PINC&0x01);//wait until signal goes low
	}
	return data;//return 8 bit data
  e2:	08 95       	ret

000000e4 <RWdata>:
		while(!(UCSRA&(1<<UDRE)));
		UDR=nos[j];
		_delay_ms(10);
		j++;
	}
}
  e4:	8f b9       	out	0x0f, r24	; 15
  e6:	77 9b       	sbis	0x0e, 7	; 14
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <RWdata+0x2>
  ea:	8f b1       	in	r24, 0x0f	; 15
  ec:	08 95       	ret

000000ee <send_chunck_of_data>:
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	7c 01       	movw	r14, r24
  fc:	16 2f       	mov	r17, r22
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <send_chunck_of_data+0x14>
 106:	00 c0       	rjmp	.+0      	; 0x108 <send_chunck_of_data+0x1a>
 108:	00 00       	nop
 10a:	c4 98       	cbi	0x18, 4	; 24
 10c:	87 e8       	ldi	r24, 0x87	; 135
 10e:	93 e1       	ldi	r25, 0x13	; 19
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <send_chunck_of_data+0x22>
 114:	00 c0       	rjmp	.+0      	; 0x116 <send_chunck_of_data+0x28>
 116:	00 00       	nop
 118:	81 ee       	ldi	r24, 0xE1	; 225
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 11e:	87 e8       	ldi	r24, 0x87	; 135
 120:	93 e1       	ldi	r25, 0x13	; 19
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <send_chunck_of_data+0x34>
 126:	00 c0       	rjmp	.+0      	; 0x128 <send_chunck_of_data+0x3a>
 128:	00 00       	nop
 12a:	c4 9a       	sbi	0x18, 4	; 24
 12c:	87 e8       	ldi	r24, 0x87	; 135
 12e:	93 e1       	ldi	r25, 0x13	; 19
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <send_chunck_of_data+0x42>
 134:	00 c0       	rjmp	.+0      	; 0x136 <send_chunck_of_data+0x48>
 136:	00 00       	nop
 138:	c4 98       	cbi	0x18, 4	; 24
 13a:	87 e8       	ldi	r24, 0x87	; 135
 13c:	93 e1       	ldi	r25, 0x13	; 19
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <send_chunck_of_data+0x50>
 142:	00 c0       	rjmp	.+0      	; 0x144 <send_chunck_of_data+0x56>
 144:	00 00       	nop
 146:	80 ea       	ldi	r24, 0xA0	; 160
 148:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 14c:	87 e8       	ldi	r24, 0x87	; 135
 14e:	93 e1       	ldi	r25, 0x13	; 19
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <send_chunck_of_data+0x62>
 154:	00 c0       	rjmp	.+0      	; 0x156 <send_chunck_of_data+0x68>
 156:	00 00       	nop
 158:	11 23       	and	r17, r17
 15a:	a1 f0       	breq	.+40     	; 0x184 <send_chunck_of_data+0x96>
 15c:	e7 01       	movw	r28, r14
 15e:	11 50       	subi	r17, 0x01	; 1
 160:	01 2f       	mov	r16, r17
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	0f 5f       	subi	r16, 0xFF	; 255
 166:	1f 4f       	sbci	r17, 0xFF	; 255
 168:	0e 0d       	add	r16, r14
 16a:	1f 1d       	adc	r17, r15
 16c:	89 91       	ld	r24, Y+
 16e:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 172:	87 e8       	ldi	r24, 0x87	; 135
 174:	93 e1       	ldi	r25, 0x13	; 19
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <send_chunck_of_data+0x88>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <send_chunck_of_data+0x8e>
 17c:	00 00       	nop
 17e:	c0 17       	cp	r28, r16
 180:	d1 07       	cpc	r29, r17
 182:	a1 f7       	brne	.-24     	; 0x16c <send_chunck_of_data+0x7e>
 184:	c4 9a       	sbi	0x18, 4	; 24
 186:	87 e8       	ldi	r24, 0x87	; 135
 188:	93 e1       	ldi	r25, 0x13	; 19
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <send_chunck_of_data+0x9c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <send_chunck_of_data+0xa2>
 190:	00 00       	nop
 192:	c3 9a       	sbi	0x18, 3	; 24
 194:	87 e9       	ldi	r24, 0x97	; 151
 196:	9a e3       	ldi	r25, 0x3A	; 58
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <send_chunck_of_data+0xaa>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <send_chunck_of_data+0xb0>
 19e:	00 00       	nop
 1a0:	c3 98       	cbi	0x18, 3	; 24
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <reset>:
 1b0:	87 e8       	ldi	r24, 0x87	; 135
 1b2:	93 e1       	ldi	r25, 0x13	; 19
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <reset+0x4>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <reset+0xa>
 1ba:	00 00       	nop
 1bc:	c4 98       	cbi	0x18, 4	; 24
 1be:	87 e8       	ldi	r24, 0x87	; 135
 1c0:	93 e1       	ldi	r25, 0x13	; 19
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <reset+0x12>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <reset+0x18>
 1c8:	00 00       	nop
 1ca:	87 e2       	ldi	r24, 0x27	; 39
 1cc:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 1d0:	87 e8       	ldi	r24, 0x87	; 135
 1d2:	93 e1       	ldi	r25, 0x13	; 19
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <reset+0x24>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <reset+0x2a>
 1da:	00 00       	nop
 1dc:	80 e7       	ldi	r24, 0x70	; 112
 1de:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 1e2:	87 e8       	ldi	r24, 0x87	; 135
 1e4:	93 e1       	ldi	r25, 0x13	; 19
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <reset+0x36>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <reset+0x3c>
 1ec:	00 00       	nop
 1ee:	c4 9a       	sbi	0x18, 4	; 24
 1f0:	87 e8       	ldi	r24, 0x87	; 135
 1f2:	93 e1       	ldi	r25, 0x13	; 19
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <reset+0x44>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <reset+0x4a>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <setnrf>:
void setnrf(uint8_t registers,uint8_t values_to_put)
{
 1fe:	cf 93       	push	r28
 200:	c6 2f       	mov	r28, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	e7 e8       	ldi	r30, 0x87	; 135
 204:	f3 e1       	ldi	r31, 0x13	; 19
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <setnrf+0x8>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <setnrf+0xe>
 20c:	00 00       	nop
	_delay_ms(10);
	PORTB&=~(1<<SS);
 20e:	c4 98       	cbi	0x18, 4	; 24
 210:	e7 e8       	ldi	r30, 0x87	; 135
 212:	f3 e1       	ldi	r31, 0x13	; 19
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <setnrf+0x16>
 218:	00 c0       	rjmp	.+0      	; 0x21a <setnrf+0x1c>
 21a:	00 00       	nop
	_delay_ms(10);
	RWdata((W_REGISTER+registers));
 21c:	80 5e       	subi	r24, 0xE0	; 224
 21e:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 222:	87 e8       	ldi	r24, 0x87	; 135
 224:	93 e1       	ldi	r25, 0x13	; 19
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <setnrf+0x28>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <setnrf+0x2e>
 22c:	00 00       	nop
	_delay_ms(10);
	RWdata(values_to_put);
 22e:	8c 2f       	mov	r24, r28
 230:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 234:	e7 e8       	ldi	r30, 0x87	; 135
 236:	f3 e1       	ldi	r31, 0x13	; 19
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <setnrf+0x3a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <setnrf+0x40>
 23e:	00 00       	nop
	_delay_ms(10);
	PORTB|=(1<<SS);
 240:	c4 9a       	sbi	0x18, 4	; 24
 242:	87 e8       	ldi	r24, 0x87	; 135
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <setnrf+0x48>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <setnrf+0x4e>
 24c:	00 00       	nop
	_delay_ms(10);
}
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <initialize>:
			   flush_every();
			   _delay_ms(10);
    }
}
void initialize()
{
 252:	cf 93       	push	r28
 254:	8f e4       	ldi	r24, 0x4F	; 79
 256:	93 ec       	ldi	r25, 0xC3	; 195
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <initialize+0x6>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <initialize+0xc>
 25e:	00 00       	nop
	_delay_ms(100);
	setnrf(EN_AA,0x01);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 268:	87 e8       	ldi	r24, 0x87	; 135
 26a:	93 e1       	ldi	r25, 0x13	; 19
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <initialize+0x1a>
 270:	00 c0       	rjmp	.+0      	; 0x272 <initialize+0x20>
 272:	00 00       	nop
	_delay_ms(10);
	setnrf(EN_RXADDR,0x01);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 27c:	87 e8       	ldi	r24, 0x87	; 135
 27e:	93 e1       	ldi	r25, 0x13	; 19
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <initialize+0x2e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <initialize+0x34>
 286:	00 00       	nop
	_delay_ms(10);
	setnrf(SETUP_AW,0x03);
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 290:	87 e8       	ldi	r24, 0x87	; 135
 292:	93 e1       	ldi	r25, 0x13	; 19
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <initialize+0x42>
 298:	00 c0       	rjmp	.+0      	; 0x29a <initialize+0x48>
 29a:	00 00       	nop
	_delay_ms(10);
	setnrf(SETUP_RETR,0xFF);
 29c:	6f ef       	ldi	r22, 0xFF	; 255
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 2a4:	87 e8       	ldi	r24, 0x87	; 135
 2a6:	93 e1       	ldi	r25, 0x13	; 19
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <initialize+0x56>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <initialize+0x5c>
 2ae:	00 00       	nop
	_delay_ms(10);
	setnrf(RF_SETUP,0x24);
 2b0:	64 e2       	ldi	r22, 0x24	; 36
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 2b8:	87 e8       	ldi	r24, 0x87	; 135
 2ba:	93 e1       	ldi	r25, 0x13	; 19
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <initialize+0x6a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <initialize+0x70>
 2c2:	00 00       	nop
	_delay_ms(10);
	setnrf(RF_CH,0X09);
 2c4:	69 e0       	ldi	r22, 0x09	; 9
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 2cc:	87 e8       	ldi	r24, 0x87	; 135
 2ce:	93 e1       	ldi	r25, 0x13	; 19
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <initialize+0x7e>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <initialize+0x84>
 2d6:	00 00       	nop
	_delay_ms(10);
	setnrf(FEATURE,0x06);
 2d8:	66 e0       	ldi	r22, 0x06	; 6
 2da:	8d e1       	ldi	r24, 0x1D	; 29
 2dc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 2e0:	87 e8       	ldi	r24, 0x87	; 135
 2e2:	93 e1       	ldi	r25, 0x13	; 19
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <initialize+0x92>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <initialize+0x98>
 2ea:	00 00       	nop
	_delay_ms(10);
	setnrf(DYNPD,0x01);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	8c e1       	ldi	r24, 0x1C	; 28
 2f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 2f4:	87 e8       	ldi	r24, 0x87	; 135
 2f6:	93 e1       	ldi	r25, 0x13	; 19
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <initialize+0xa6>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <initialize+0xac>
 2fe:	00 00       	nop
	_delay_ms(10);
	PORTB&=~(1<<SS);
 300:	c4 98       	cbi	0x18, 4	; 24
 302:	87 e8       	ldi	r24, 0x87	; 135
 304:	93 e1       	ldi	r25, 0x13	; 19
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <initialize+0xb4>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <initialize+0xba>
 30c:	00 00       	nop
	_delay_ms(10);
	RWdata(TX_ADDR+W_REGISTER);
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 314:	87 e8       	ldi	r24, 0x87	; 135
 316:	93 e1       	ldi	r25, 0x13	; 19
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <initialize+0xc6>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <initialize+0xcc>
 31e:	00 00       	nop
 320:	c5 e0       	ldi	r28, 0x05	; 5
	_delay_ms(10);
	for (char i=0;i<5;i++)
	{
		RWdata(0xEE);
 322:	8e ee       	ldi	r24, 0xEE	; 238
 324:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 328:	87 e8       	ldi	r24, 0x87	; 135
 32a:	93 e1       	ldi	r25, 0x13	; 19
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <initialize+0xda>
 330:	00 c0       	rjmp	.+0      	; 0x332 <initialize+0xe0>
 332:	00 00       	nop
 334:	c1 50       	subi	r28, 0x01	; 1
	_delay_ms(10);
	PORTB&=~(1<<SS);
	_delay_ms(10);
	RWdata(TX_ADDR+W_REGISTER);
	_delay_ms(10);
	for (char i=0;i<5;i++)
 336:	a9 f7       	brne	.-22     	; 0x322 <initialize+0xd0>
	{
		RWdata(0xEE);
		_delay_ms(10);
	}
	PORTB|=(1<<SS);
 338:	c4 9a       	sbi	0x18, 4	; 24
 33a:	87 e8       	ldi	r24, 0x87	; 135
 33c:	93 e1       	ldi	r25, 0x13	; 19
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <initialize+0xec>
 342:	00 c0       	rjmp	.+0      	; 0x344 <initialize+0xf2>
 344:	00 00       	nop
 346:	87 e8       	ldi	r24, 0x87	; 135
 348:	93 e1       	ldi	r25, 0x13	; 19
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <initialize+0xf8>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <initialize+0xfe>
 350:	00 00       	nop
	_delay_ms(10);
	_delay_ms(10);
	PORTB&=~(1<<SS);
 352:	c4 98       	cbi	0x18, 4	; 24
 354:	87 e8       	ldi	r24, 0x87	; 135
 356:	93 e1       	ldi	r25, 0x13	; 19
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <initialize+0x106>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <initialize+0x10c>
 35e:	00 00       	nop
	_delay_ms(10);
	RWdata(RX_ADDR_P0+W_REGISTER);
 360:	8a e2       	ldi	r24, 0x2A	; 42
 362:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 366:	87 e8       	ldi	r24, 0x87	; 135
 368:	93 e1       	ldi	r25, 0x13	; 19
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <initialize+0x118>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <initialize+0x11e>
 370:	00 00       	nop
 372:	c5 e0       	ldi	r28, 0x05	; 5
	_delay_ms(10);
	for (char i=0;i<5;i++)
	{
		RWdata(0xEE);
 374:	8e ee       	ldi	r24, 0xEE	; 238
 376:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
 37a:	87 e8       	ldi	r24, 0x87	; 135
 37c:	93 e1       	ldi	r25, 0x13	; 19
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <initialize+0x12c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <initialize+0x132>
 384:	00 00       	nop
 386:	c1 50       	subi	r28, 0x01	; 1
	_delay_ms(10);
	PORTB&=~(1<<SS);
	_delay_ms(10);
	RWdata(RX_ADDR_P0+W_REGISTER);
	_delay_ms(10);
	for (char i=0;i<5;i++)
 388:	a9 f7       	brne	.-22     	; 0x374 <initialize+0x122>
	{
		RWdata(0xEE);
		_delay_ms(10);
	}
	PORTB|=(1<<SS);
 38a:	c4 9a       	sbi	0x18, 4	; 24
 38c:	87 e8       	ldi	r24, 0x87	; 135
 38e:	93 e1       	ldi	r25, 0x13	; 19
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <initialize+0x13e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <initialize+0x144>
 396:	00 00       	nop
	_delay_ms(10);
	setnrf(RX_PW_P0,0x05);
 398:	65 e0       	ldi	r22, 0x05	; 5
 39a:	81 e1       	ldi	r24, 0x11	; 17
 39c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 3a0:	87 e8       	ldi	r24, 0x87	; 135
 3a2:	93 e1       	ldi	r25, 0x13	; 19
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <initialize+0x152>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <initialize+0x158>
 3aa:	00 00       	nop
	_delay_ms(10);
	setnrf(CONFIG,0x7A);
 3ac:	6a e7       	ldi	r22, 0x7A	; 122
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setnrf>
 3b4:	8f e4       	ldi	r24, 0x4F	; 79
 3b6:	93 ec       	ldi	r25, 0xC3	; 195
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <initialize+0x166>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <initialize+0x16c>
 3be:	00 00       	nop
	_delay_ms(100);
}
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <flush_every>:
	PORTB|=(1<<SS);
	_delay_ms(10);
}
void flush_every()
{
	PORTB&=~(1<<SS);
 3c4:	c4 98       	cbi	0x18, 4	; 24
 3c6:	83 ec       	ldi	r24, 0xC3	; 195
 3c8:	99 e0       	ldi	r25, 0x09	; 9
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <flush_every+0x6>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <flush_every+0xc>
 3d0:	00 00       	nop
			_delay_ms(5);
			RWdata(FLUSH_TX);
 3d2:	81 ee       	ldi	r24, 0xE1	; 225
 3d4:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
			PORTB|=(1<<SS);
 3d8:	c4 9a       	sbi	0x18, 4	; 24
 3da:	83 ec       	ldi	r24, 0xC3	; 195
 3dc:	99 e0       	ldi	r25, 0x09	; 9
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <flush_every+0x1a>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <flush_every+0x20>
 3e4:	00 00       	nop
			_delay_ms(5);
			PORTB&=~(1<<SS);
 3e6:	c4 98       	cbi	0x18, 4	; 24
 3e8:	83 ec       	ldi	r24, 0xC3	; 195
 3ea:	99 e0       	ldi	r25, 0x09	; 9
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <flush_every+0x28>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <flush_every+0x2e>
 3f2:	00 00       	nop
			_delay_ms(5);
			RWdata(FLUSH_RX);
 3f4:	82 ee       	ldi	r24, 0xE2	; 226
 3f6:	0e 94 72 00 	call	0xe4	; 0xe4 <RWdata>
			PORTB|=(1<<SS);
 3fa:	c4 9a       	sbi	0x18, 4	; 24
 3fc:	08 95       	ret

000003fe <return_char>:
		}
		
}
unsigned char return_char()
{
	while (!(UCSRA&(1<<RXC)));//wait until UDR register contain data received from other device
 3fe:	5f 9b       	sbis	0x0b, 7	; 11
 400:	fe cf       	rjmp	.-4      	; 0x3fe <return_char>
	return UDR;// return value obtained from other device through Rx pin
 402:	8c b1       	in	r24, 0x0c	; 12
 404:	08 95       	ret

00000406 <getlocation>:
			RWdata(FLUSH_RX);
			PORTB|=(1<<SS);
	
}
void getlocation()
{
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
	char i=0;
	char j=1;
	location[0]=0x67;
 40c:	87 e6       	ldi	r24, 0x67	; 103
 40e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <location>
		char takeallvalue=0;
 412:	c0 e0       	ldi	r28, 0x00	; 0
	
}
void getlocation()
{
	char i=0;
	char j=1;
 414:	d1 e0       	ldi	r29, 0x01	; 1
 416:	01 c0       	rjmp	.+2      	; 0x41a <getlocation+0x14>
	location[0]=0x67;
		char takeallvalue=0;
		while(takeallvalue<=3)
 418:	c8 2f       	mov	r28, r24
		{
			i=return_char();
 41a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
			if (i==0x24)//check if variable i is "$"
 41e:	84 32       	cpi	r24, 0x24	; 36
 420:	09 f0       	breq	.+2      	; 0x424 <getlocation+0x1e>
 422:	49 c0       	rjmp	.+146    	; 0x4b6 <getlocation+0xb0>
			{
				i=return_char();
 424:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
				if (i==0x47)//check if variable i is "G"
 428:	87 34       	cpi	r24, 0x47	; 71
 42a:	b1 f5       	brne	.+108    	; 0x498 <getlocation+0x92>
				{
					i=return_char();
 42c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
					if (i==0x50)//check if variable i is "P"
 430:	80 35       	cpi	r24, 0x50	; 80
 432:	a1 f5       	brne	.+104    	; 0x49c <getlocation+0x96>
					{
						i=return_char();
 434:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
						if (i==0x47)//check if variable i is "G"
 438:	87 34       	cpi	r24, 0x47	; 71
 43a:	91 f5       	brne	.+100    	; 0x4a0 <getlocation+0x9a>
						{
							i=return_char();
 43c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
							if (i==0x47)//check if variable i is "G"
 440:	87 34       	cpi	r24, 0x47	; 71
 442:	81 f5       	brne	.+96     	; 0x4a4 <getlocation+0x9e>
							{
								i=return_char();
 444:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
								if (i==0x41)//check if variable i is "A"
 448:	81 34       	cpi	r24, 0x41	; 65
 44a:	71 f5       	brne	.+92     	; 0x4a8 <getlocation+0xa2>
								{
									i=return_char();
 44c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
									if (i==0x2C)//check if variable i is ","
 450:	8c 32       	cpi	r24, 0x2C	; 44
 452:	61 f5       	brne	.+88     	; 0x4ac <getlocation+0xa6>
									{
										i=return_char();
 454:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
										while(i!=0x2C)
 458:	8c 32       	cpi	r24, 0x2C	; 44
 45a:	21 f0       	breq	.+8      	; 0x464 <getlocation+0x5e>
										{
											i=return_char();
 45c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
								{
									i=return_char();
									if (i==0x2C)//check if variable i is ","
									{
										i=return_char();
										while(i!=0x2C)
 460:	8c 32       	cpi	r24, 0x2C	; 44
 462:	e1 f7       	brne	.-8      	; 0x45c <getlocation+0x56>
										{
											i=return_char();
										}
										while (takeallvalue<=3)
 464:	c4 30       	cpi	r28, 0x04	; 4
 466:	50 f5       	brcc	.+84     	; 0x4bc <getlocation+0xb6>
											if(i==0x2C)
											{
												takeallvalue++;
												if (takeallvalue==2)
												{
													location[j]=i;
 468:	1c e2       	ldi	r17, 0x2C	; 44
										{
											i=return_char();
										}
										while (takeallvalue<=3)
										{
											i=return_char();
 46a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <return_char>
											if(i==0x2C)
 46e:	8c 32       	cpi	r24, 0x2C	; 44
 470:	51 f4       	brne	.+20     	; 0x486 <getlocation+0x80>
											{
												takeallvalue++;
 472:	cf 5f       	subi	r28, 0xFF	; 255
												if (takeallvalue==2)
 474:	c2 30       	cpi	r28, 0x02	; 2
 476:	69 f4       	brne	.+26     	; 0x492 <getlocation+0x8c>
												{
													location[j]=i;
 478:	ed 2f       	mov	r30, r29
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	ef 58       	subi	r30, 0x8F	; 143
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	10 83       	st	Z, r17
													j++;
 482:	df 5f       	subi	r29, 0xFF	; 255
 484:	f2 cf       	rjmp	.-28     	; 0x46a <getlocation+0x64>
												}
											}
											else
											{
												location[j]=i;
 486:	ed 2f       	mov	r30, r29
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	ef 58       	subi	r30, 0x8F	; 143
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	80 83       	st	Z, r24
												j++;
 490:	df 5f       	subi	r29, 0xFF	; 255
										i=return_char();
										while(i!=0x2C)
										{
											i=return_char();
										}
										while (takeallvalue<=3)
 492:	c4 30       	cpi	r28, 0x04	; 4
 494:	50 f3       	brcs	.-44     	; 0x46a <getlocation+0x64>
 496:	12 c0       	rjmp	.+36     	; 0x4bc <getlocation+0xb6>
 498:	8c 2f       	mov	r24, r28
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <getlocation+0xa8>
 49c:	8c 2f       	mov	r24, r28
 49e:	07 c0       	rjmp	.+14     	; 0x4ae <getlocation+0xa8>
 4a0:	8c 2f       	mov	r24, r28
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <getlocation+0xa8>
 4a4:	8c 2f       	mov	r24, r28
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <getlocation+0xa8>
 4a8:	8c 2f       	mov	r24, r28
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <getlocation+0xa8>
 4ac:	8c 2f       	mov	r24, r28
{
	char i=0;
	char j=1;
	location[0]=0x67;
		char takeallvalue=0;
		while(takeallvalue<=3)
 4ae:	c4 30       	cpi	r28, 0x04	; 4
 4b0:	08 f4       	brcc	.+2      	; 0x4b4 <getlocation+0xae>
 4b2:	b2 cf       	rjmp	.-156    	; 0x418 <getlocation+0x12>
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <getlocation+0xb6>
 4b6:	c4 30       	cpi	r28, 0x04	; 4
 4b8:	08 f4       	brcc	.+2      	; 0x4bc <getlocation+0xb6>
 4ba:	af cf       	rjmp	.-162    	; 0x41a <getlocation+0x14>
					}
				}
			}
		}
		
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	08 95       	ret

000004c4 <main>:
	 	uint8_t humidity=0;
	 	uint8_t humidity1=0;
	 	uint8_t checksum=0;
	 	uint8_t sum=0;
	 	uint8_t arrange_array=0;
	 DDRA&=~(1<<1);
 4c4:	d1 98       	cbi	0x1a, 1	; 26
	 ADCSRA |=(1<<ADPS2);//this bit is set when we want to divide CLK frequency by 8
 4c6:	32 9a       	sbi	0x06, 2	; 6
	 ADMUX |=(1<<REFS0)|(1<<ADLAR)|(1<<MUX0);//REFSO set ref voltage to VCC and ADLAR is use for left shifting values in ADCH and ADCL register
 4c8:	87 b1       	in	r24, 0x07	; 7
 4ca:	81 66       	ori	r24, 0x61	; 97
 4cc:	87 b9       	out	0x07, r24	; 7
	 ADCSRA |=(1<<ADEN); //this is use for enabling ADC
 4ce:	37 9a       	sbi	0x06, 7	; 6
	  UBRRH=baud_prescale>>8;
 4d0:	10 bc       	out	0x20, r1	; 32
	  UBRRL=baud_prescale;
 4d2:	8c e0       	ldi	r24, 0x0C	; 12
 4d4:	89 b9       	out	0x09, r24	; 9
	  UCSRC |=(1<<URSEL)|(3<<UCSZ0);
 4d6:	80 b5       	in	r24, 0x20	; 32
 4d8:	86 68       	ori	r24, 0x86	; 134
 4da:	80 bd       	out	0x20, r24	; 32
	  UCSRB |=(1<<TXEN)|(1<<RXEN);
 4dc:	8a b1       	in	r24, 0x0a	; 10
 4de:	88 61       	ori	r24, 0x18	; 24
 4e0:	8a b9       	out	0x0a, r24	; 10
	 DDRB|=(1<<SS)|(1<<CE)|(1<<MOSI)|(1<<SCK);
 4e2:	87 b3       	in	r24, 0x17	; 23
 4e4:	88 6b       	ori	r24, 0xB8	; 184
 4e6:	87 bb       	out	0x17, r24	; 23
	 DDRB&=~(1<<MISO);
 4e8:	be 98       	cbi	0x17, 6	; 23
    SPCR|=(1<<SPE)|(1<<MSTR);
 4ea:	8d b1       	in	r24, 0x0d	; 13
 4ec:	80 65       	ori	r24, 0x50	; 80
 4ee:	8d b9       	out	0x0d, r24	; 13
	SPCR&=~(1<<SPIE);
 4f0:	6f 98       	cbi	0x0d, 7	; 13
	SPCR&=~(1<<DORD);
 4f2:	6d 98       	cbi	0x0d, 5	; 13
	SPCR&=~(1<<CPOL);
 4f4:	6b 98       	cbi	0x0d, 3	; 13
	SPCR&=~(1<<SPR1);
 4f6:	69 98       	cbi	0x0d, 1	; 13
	PORTB|=(1<<SS);
 4f8:	c4 9a       	sbi	0x18, 4	; 24
	PORTB&=~(1<<CE);
 4fa:	c3 98       	cbi	0x18, 3	; 24
	initialize();
 4fc:	0e 94 29 01 	call	0x252	; 0x252 <initialize>
    while (1) 
    {
	         char *contain_both_humidity_tempr;
			  arrange_array=0;
 500:	d1 2c       	mov	r13, r1
		      }
		      if(sum>=0 && sum<=3)
		      {
			      itoa(temperature,value_of_tempr,10);
				    _delay_ms(10);
			      contain_both_humidity_tempr[arrange_array]=0x73;
 502:	0f 2e       	mov	r0, r31
 504:	f3 e7       	ldi	r31, 0x73	; 115
 506:	ef 2e       	mov	r14, r31
 508:	f0 2d       	mov	r31, r0
				      contain_both_humidity_tempr[arrange_array]=value_of_tempr[i];
			      }
			      itoa(humidity,value_of_humidity,10);
			      _delay_ms(10);
				  arrange_array++;
			      contain_both_humidity_tempr[arrange_array]=0x68;
 50a:	0f 2e       	mov	r0, r31
 50c:	f8 e6       	ldi	r31, 0x68	; 104
 50e:	ff 2e       	mov	r15, r31
 510:	f0 2d       	mov	r31, r0
			      for(uint8_t i=0;i<3;i++)
			      {
					  arrange_array++;
 512:	06 e0       	ldi	r16, 0x06	; 6
			  thelow=ADCL;// done so that lag doesn't occur while running as we need to access ADCH and ADCL at same time
			  temperature_in_voltage_format= (ADCH<<2)|(thelow>>6);//this is use to get 10 bit data from ADC
			  tempr_of_animal=temperature_in_voltage_format/2;
			  itoa(temperature_in_voltage_format,tempr_animal,10);
			  _delay_ms(10);
			   contain_both_humidity_tempr[arrange_array]=0x74;
 514:	14 e7       	ldi	r17, 0x74	; 116
 516:	87 e8       	ldi	r24, 0x87	; 135
 518:	93 e1       	ldi	r25, 0x13	; 19
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <main+0x56>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <main+0x5c>
 520:	00 00       	nop
    while (1) 
    {
	         char *contain_both_humidity_tempr;
			  arrange_array=0;
			  _delay_ms(10);
		      reset();
 522:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <reset>
 526:	87 e8       	ldi	r24, 0x87	; 135
 528:	93 e1       	ldi	r25, 0x13	; 19
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <main+0x66>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0x6c>
 530:	00 00       	nop
		      _delay_ms(10);
		      send_chunck_of_data(animalId,sizeof(animalId));
 532:	6a e0       	ldi	r22, 0x0A	; 10
 534:	80 e6       	ldi	r24, 0x60	; 96
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 77 00 	call	0xee	; 0xee <send_chunck_of_data>
 53c:	8f e4       	ldi	r24, 0x4F	; 79
 53e:	93 ec       	ldi	r25, 0xC3	; 195
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <main+0x7c>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x82>
 546:	00 00       	nop
		      _delay_ms(100);
		      flush_every();
 548:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <flush_every>
 54c:	87 e8       	ldi	r24, 0x87	; 135
 54e:	93 e1       	ldi	r25, 0x13	; 19
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <main+0x8c>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x92>
 556:	00 00       	nop
		      _delay_ms(10);
		      DDRC|=(1<<PINC0);
 558:	a0 9a       	sbi	0x14, 0	; 20
		      PORTC|=(1<<PINC0);
 55a:	a8 9a       	sbi	0x15, 0	; 21
		      start_conversion();
 55c:	0e 94 49 00 	call	0x92	; 0x92 <start_conversion>
		      response();
 560:	0e 94 57 00 	call	0xae	; 0xae <response>
		      humidity=receiving_data();
 564:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 568:	c8 2e       	mov	r12, r24
		      humidity1=receiving_data();
 56a:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 56e:	d8 2f       	mov	r29, r24
		      temperature=receiving_data();
 570:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 574:	b8 2e       	mov	r11, r24
		      temperature1=receiving_data();
 576:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 57a:	c8 2f       	mov	r28, r24
		      checksum=receiving_data();
 57c:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
		      sum=humidity1+humidity+temperature1+temperature;
 580:	dc 0d       	add	r29, r12
 582:	db 0d       	add	r29, r11
 584:	9d 2f       	mov	r25, r29
 586:	9c 0f       	add	r25, r28
		      if(checksum>sum)
 588:	98 17       	cp	r25, r24
 58a:	18 f4       	brcc	.+6      	; 0x592 <main+0xce>
		      {
			      sum=checksum-sum;
 58c:	89 1b       	sub	r24, r25
 58e:	98 2f       	mov	r25, r24
 590:	01 c0       	rjmp	.+2      	; 0x594 <main+0xd0>
		      }
		      else
		      {
			      sum=sum-checksum;
 592:	98 1b       	sub	r25, r24
		      }
		      if(sum>=0 && sum<=3)
 594:	94 30       	cpi	r25, 0x04	; 4
 596:	70 f5       	brcc	.+92     	; 0x5f4 <main+0x130>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 598:	4a e0       	ldi	r20, 0x0A	; 10
 59a:	6c e6       	ldi	r22, 0x6C	; 108
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	8b 2d       	mov	r24, r11
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__itoa_ncheck>
 5a6:	87 e8       	ldi	r24, 0x87	; 135
 5a8:	93 e1       	ldi	r25, 0x13	; 19
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <main+0xe6>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0xec>
 5b0:	00 00       	nop
		      {
			      itoa(temperature,value_of_tempr,10);
				    _delay_ms(10);
			      contain_both_humidity_tempr[arrange_array]=0x73;
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
 5b6:	e8 82       	st	Y, r14
			      for(uint8_t i=0;i<2;i++)
			      {
					  arrange_array++;
				      contain_both_humidity_tempr[arrange_array]=value_of_tempr[i];
 5b8:	ec e6       	ldi	r30, 0x6C	; 108
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	89 83       	std	Y+1, r24	; 0x01
 5c0:	81 81       	ldd	r24, Z+1	; 0x01
 5c2:	8a 83       	std	Y+2, r24	; 0x02
 5c4:	4a e0       	ldi	r20, 0x0A	; 10
 5c6:	6a e6       	ldi	r22, 0x6A	; 106
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	8c 2d       	mov	r24, r12
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__itoa_ncheck>
 5d2:	87 e8       	ldi	r24, 0x87	; 135
 5d4:	93 e1       	ldi	r25, 0x13	; 19
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <main+0x112>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <main+0x118>
 5dc:	00 00       	nop
			      }
			      itoa(humidity,value_of_humidity,10);
			      _delay_ms(10);
				  arrange_array++;
			      contain_both_humidity_tempr[arrange_array]=0x68;
 5de:	fb 82       	std	Y+3, r15	; 0x03
			      for(uint8_t i=0;i<3;i++)
			      {
					  arrange_array++;
				      contain_both_humidity_tempr[arrange_array]=value_of_humidity[i];
 5e0:	ea e6       	ldi	r30, 0x6A	; 106
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	8c 83       	std	Y+4, r24	; 0x04
 5e8:	81 81       	ldd	r24, Z+1	; 0x01
 5ea:	8d 83       	std	Y+5, r24	; 0x05
 5ec:	82 81       	ldd	r24, Z+2	; 0x02
 5ee:	8e 83       	std	Y+6, r24	; 0x06
			      _delay_ms(10);
				  arrange_array++;
			      contain_both_humidity_tempr[arrange_array]=0x68;
			      for(uint8_t i=0;i<3;i++)
			      {
					  arrange_array++;
 5f0:	d0 2f       	mov	r29, r16
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <main+0x132>
	PORTB&=~(1<<CE);
	initialize();
    while (1) 
    {
	         char *contain_both_humidity_tempr;
			  arrange_array=0;
 5f4:	dd 2d       	mov	r29, r13
 5f6:	9f eb       	ldi	r25, 0xBF	; 191
 5f8:	27 e2       	ldi	r18, 0x27	; 39
 5fa:	89 e0       	ldi	r24, 0x09	; 9
 5fc:	91 50       	subi	r25, 0x01	; 1
 5fe:	20 40       	sbci	r18, 0x00	; 0
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x138>
 604:	00 c0       	rjmp	.+0      	; 0x606 <main+0x142>
 606:	00 00       	nop
					  arrange_array++;
				      contain_both_humidity_tempr[arrange_array]=value_of_humidity[i];
			      }
		      }
		      _delay_ms(1500);
			  arrange_array++;
 608:	c1 e0       	ldi	r28, 0x01	; 1
 60a:	cd 0f       	add	r28, r29
			  ADCSRA|=(1<<ADSC);
 60c:	36 9a       	sbi	0x06, 6	; 6
 60e:	8f e0       	ldi	r24, 0x0F	; 15
 610:	97 e2       	ldi	r25, 0x27	; 39
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <main+0x14e>
 616:	00 c0       	rjmp	.+0      	; 0x618 <main+0x154>
 618:	00 00       	nop
			 _delay_ms(20);
			 ADCSRA&=~(1<<ADSC);
 61a:	36 98       	cbi	0x06, 6	; 6
			  thelow=ADCL;// done so that lag doesn't occur while running as we need to access ADCH and ADCL at same time
 61c:	24 b1       	in	r18, 0x04	; 4
			  temperature_in_voltage_format= (ADCH<<2)|(thelow>>6);//this is use to get 10 bit data from ADC
 61e:	85 b1       	in	r24, 0x05	; 5
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	22 95       	swap	r18
 62c:	26 95       	lsr	r18
 62e:	26 95       	lsr	r18
 630:	23 70       	andi	r18, 0x03	; 3
 632:	4a e0       	ldi	r20, 0x0A	; 10
 634:	6e e6       	ldi	r22, 0x6E	; 110
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	82 2b       	or	r24, r18
 63a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__itoa_ncheck>
 63e:	87 e8       	ldi	r24, 0x87	; 135
 640:	93 e1       	ldi	r25, 0x13	; 19
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <main+0x17e>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main+0x184>
 648:	00 00       	nop
			  tempr_of_animal=temperature_in_voltage_format/2;
			  itoa(temperature_in_voltage_format,tempr_animal,10);
			  _delay_ms(10);
			   contain_both_humidity_tempr[arrange_array]=0x74;
 64a:	ec 2f       	mov	r30, r28
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	10 83       	st	Z, r17
 650:	ee e6       	ldi	r30, 0x6E	; 110
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	94 e0       	ldi	r25, 0x04	; 4
 656:	9d 0f       	add	r25, r29
			  for (uint8_t i=0;i<3;i++)
			  {
				   arrange_array++;
 658:	cf 5f       	subi	r28, 0xFF	; 255
				   contain_both_humidity_tempr[arrange_array]=tempr_animal[i];
 65a:	81 91       	ld	r24, Z+
 65c:	ac 2f       	mov	r26, r28
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	8c 93       	st	X, r24
			  temperature_in_voltage_format= (ADCH<<2)|(thelow>>6);//this is use to get 10 bit data from ADC
			  tempr_of_animal=temperature_in_voltage_format/2;
			  itoa(temperature_in_voltage_format,tempr_animal,10);
			  _delay_ms(10);
			   contain_both_humidity_tempr[arrange_array]=0x74;
			  for (uint8_t i=0;i<3;i++)
 662:	c9 13       	cpse	r28, r25
 664:	f9 cf       	rjmp	.-14     	; 0x658 <main+0x194>
 666:	87 e8       	ldi	r24, 0x87	; 135
 668:	93 e1       	ldi	r25, 0x13	; 19
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <main+0x1a6>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x1ac>
 670:	00 00       	nop
				   arrange_array++;
				   contain_both_humidity_tempr[arrange_array]=tempr_animal[i];
			  }
			  arrange_array++;
			   _delay_ms(10);
		        reset();
 672:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <reset>
 676:	87 e8       	ldi	r24, 0x87	; 135
 678:	93 e1       	ldi	r25, 0x13	; 19
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <main+0x1b6>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0x1bc>
 680:	00 00       	nop
		      _delay_ms(10);
		      send_chunck_of_data(contain_both_humidity_tempr,arrange_array);
 682:	65 e0       	ldi	r22, 0x05	; 5
 684:	6d 0f       	add	r22, r29
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 77 00 	call	0xee	; 0xee <send_chunck_of_data>
 68e:	8f e4       	ldi	r24, 0x4F	; 79
 690:	93 ec       	ldi	r25, 0xC3	; 195
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <main+0x1ce>
 696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x1d4>
 698:	00 00       	nop
		      _delay_ms(100);
			  flush_every();
 69a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <flush_every>
 69e:	87 e8       	ldi	r24, 0x87	; 135
 6a0:	93 e1       	ldi	r25, 0x13	; 19
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <main+0x1de>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0x1e4>
 6a8:	00 00       	nop
			   _delay_ms(10);
			  arrange_array =0;
			  getlocation();
 6aa:	0e 94 03 02 	call	0x406	; 0x406 <getlocation>
 6ae:	87 e8       	ldi	r24, 0x87	; 135
 6b0:	93 e1       	ldi	r25, 0x13	; 19
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0x1ee>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x1f4>
 6b8:	00 00       	nop
			   _delay_ms(10);
			   reset();
 6ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <reset>
 6be:	87 e8       	ldi	r24, 0x87	; 135
 6c0:	93 e1       	ldi	r25, 0x13	; 19
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0x1fe>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x204>
 6c8:	00 00       	nop
			   _delay_ms(10);
			   send_chunck_of_data(location,26);
 6ca:	6a e1       	ldi	r22, 0x1A	; 26
 6cc:	81 e7       	ldi	r24, 0x71	; 113
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 77 00 	call	0xee	; 0xee <send_chunck_of_data>
 6d4:	8f e4       	ldi	r24, 0x4F	; 79
 6d6:	93 ec       	ldi	r25, 0xC3	; 195
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0x214>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x21a>
 6de:	00 00       	nop
			   _delay_ms(100);
			   flush_every();
 6e0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <flush_every>
 6e4:	87 e8       	ldi	r24, 0x87	; 135
 6e6:	93 e1       	ldi	r25, 0x13	; 19
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <main+0x224>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x22a>
 6ee:	00 00       	nop
 6f0:	12 cf       	rjmp	.-476    	; 0x516 <main+0x52>

000006f2 <__itoa_ncheck>:
 6f2:	bb 27       	eor	r27, r27
 6f4:	4a 30       	cpi	r20, 0x0A	; 10
 6f6:	31 f4       	brne	.+12     	; 0x704 <__itoa_ncheck+0x12>
 6f8:	99 23       	and	r25, r25
 6fa:	22 f4       	brpl	.+8      	; 0x704 <__itoa_ncheck+0x12>
 6fc:	bd e2       	ldi	r27, 0x2D	; 45
 6fe:	90 95       	com	r25
 700:	81 95       	neg	r24
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	0c 94 85 03 	jmp	0x70a	; 0x70a <__utoa_common>

00000708 <__utoa_ncheck>:
 708:	bb 27       	eor	r27, r27

0000070a <__utoa_common>:
 70a:	fb 01       	movw	r30, r22
 70c:	55 27       	eor	r21, r21
 70e:	aa 27       	eor	r26, r26
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	aa 1f       	adc	r26, r26
 716:	a4 17       	cp	r26, r20
 718:	10 f0       	brcs	.+4      	; 0x71e <__utoa_common+0x14>
 71a:	a4 1b       	sub	r26, r20
 71c:	83 95       	inc	r24
 71e:	50 51       	subi	r21, 0x10	; 16
 720:	b9 f7       	brne	.-18     	; 0x710 <__utoa_common+0x6>
 722:	a0 5d       	subi	r26, 0xD0	; 208
 724:	aa 33       	cpi	r26, 0x3A	; 58
 726:	08 f0       	brcs	.+2      	; 0x72a <__utoa_common+0x20>
 728:	a9 5d       	subi	r26, 0xD9	; 217
 72a:	a1 93       	st	Z+, r26
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	79 f7       	brne	.-34     	; 0x70e <__utoa_common+0x4>
 730:	b1 11       	cpse	r27, r1
 732:	b1 93       	st	Z+, r27
 734:	11 92       	st	Z+, r1
 736:	cb 01       	movw	r24, r22
 738:	0c 94 9e 03 	jmp	0x73c	; 0x73c <strrev>

0000073c <strrev>:
 73c:	dc 01       	movw	r26, r24
 73e:	fc 01       	movw	r30, r24
 740:	67 2f       	mov	r22, r23
 742:	71 91       	ld	r23, Z+
 744:	77 23       	and	r23, r23
 746:	e1 f7       	brne	.-8      	; 0x740 <strrev+0x4>
 748:	32 97       	sbiw	r30, 0x02	; 2
 74a:	04 c0       	rjmp	.+8      	; 0x754 <strrev+0x18>
 74c:	7c 91       	ld	r23, X
 74e:	6d 93       	st	X+, r22
 750:	70 83       	st	Z, r23
 752:	62 91       	ld	r22, -Z
 754:	ae 17       	cp	r26, r30
 756:	bf 07       	cpc	r27, r31
 758:	c8 f3       	brcs	.-14     	; 0x74c <strrev+0x10>
 75a:	08 95       	ret

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>
