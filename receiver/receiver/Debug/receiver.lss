
receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a2  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000597  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e4  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000153f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  74:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <read>:
}

void read()
{
  
  if((PINC&(1<<PINC4)))
  7c:	9c 9b       	sbis	0x13, 4	; 19
  7e:	05 c0       	rjmp	.+10     	; 0x8a <read+0xe>
  {
	  
	  dataget|=(1<<PINC4);
  80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  84:	80 61       	ori	r24, 0x10	; 16
  86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  }
  
  if((PINC&(1<<PINC5)))
  8a:	9d 9b       	sbis	0x13, 5	; 19
  8c:	05 c0       	rjmp	.+10     	; 0x98 <read+0x1c>
  {
	  
	  dataget|=(1<<PINC5);
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  92:	80 62       	ori	r24, 0x20	; 32
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  }

  if((PINC&(1<<PINC6)))
  98:	9e 9b       	sbis	0x13, 6	; 19
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <read+0x2a>
  {
	  
	  dataget|=(1<<PINC6);
  9c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  }
  if((PINC&(1<<PINC7)))
  a6:	9f 9b       	sbis	0x13, 7	; 19
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <read+0x38>
  {
	  
	  dataget|=(1<<PINC7);
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  b4:	08 95       	ret

000000b6 <transfer>:
  }
}
void transfer()
{
	while(!(UCSRA&(1<<UDRE)));
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <transfer>
	UDR=dataget;
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <main>:
char datacheck,dataget=0;
void read(void);
void transfer(void);
int main(void)
{  
	UBRRH=baud_prescale>>8;
  c2:	10 bc       	out	0x20, r1	; 32
	UBRRL=baud_prescale;
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	89 b9       	out	0x09, r24	; 9
	UCSRC |=(1<<URSEL)|(3<<UCSZ0);
  c8:	80 b5       	in	r24, 0x20	; 32
  ca:	86 68       	ori	r24, 0x86	; 134
  cc:	80 bd       	out	0x20, r24	; 32
	UCSRB |=(1<<TXEN)|(1<<RXEN);
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	88 61       	ori	r24, 0x18	; 24
  d2:	8a b9       	out	0x0a, r24	; 10
	DDRC=0x00;	 
  d4:	14 ba       	out	0x14, r1	; 20
	while (1) 
    {
		   
		  while (!(PINC&(1<<0)));//as when data is receive pinC0 will be high soo checking that 
  d6:	98 9b       	sbis	0x13, 0	; 19
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x14>
		     read();//this function is responsible of setting every bits of data 
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ed       	ldi	r18, 0xDF	; 223
  e0:	82 e2       	ldi	r24, 0x22	; 34
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x22>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x2c>
  ee:	00 00       	nop
			  _delay_ms(350);//delay is more than 200 but less or near to 400 as after sending 1st low bits data there is delay of 250 ms and deactive is for about 250 ms 
		    dataget=(dataget>>4);//shifting higher bits into lower bits
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f4:	82 95       	swap	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

			 while (!(PINC&(1<<0)));
  fc:	98 9b       	sbis	0x13, 0	; 19
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x3a>
				read();
 100:	0e 94 3e 00 	call	0x7c	; 0x7c <read>
			   transfer();//sending data at tx pin
 104:	0e 94 5b 00 	call	0xb6	; 0xb6 <transfer>
 108:	2f ed       	ldi	r18, 0xDF	; 223
 10a:	82 e2       	ldi	r24, 0x22	; 34
 10c:	92 e0       	ldi	r25, 0x02	; 2
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x4c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x56>
 118:	00 00       	nop
			 _delay_ms(350);   
		     dataget=0x00;
 11a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
    }
 11e:	db cf       	rjmp	.-74     	; 0xd6 <main+0x14>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
