
transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000012c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070c  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c2  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d0  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <stdlib.h>
#define  BAUD_RATE 9600
#define baude_prescale ((F_CPU/(BAUD_RATE*16UL))-1)
int checksum=0;
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	29 97       	sbiw	r28, 0x09	; 9
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
 DDRC=0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 bb       	out	0x14, r24	; 20
char value[9]="Madhavsir";
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x22>
  bc:	9e 01       	movw	r18, r28
  be:	26 5f       	subi	r18, 0xF6	; 246
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	fe 01       	movw	r30, r28
  c4:	31 96       	adiw	r30, 0x01	; 1
    while (1) 
    {
		char passon;
		for (uint8_t i=0;i<9;i++)
		{
			passon=value[i];
  c6:	81 91       	ld	r24, Z+
			PORTC&=~(1<<PINC4);//setting this bit will make encoder enable as it will be active in active low
  c8:	ac 98       	cbi	0x15, 4	; 21
			PORTC=passon;//as we can send 1 nibble of data so dividing 8 bit into 4 bits and sending 
  ca:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	4f e9       	ldi	r20, 0x9F	; 159
  ce:	56 e8       	ldi	r21, 0x86	; 134
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	41 50       	subi	r20, 0x01	; 1
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x40>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x4a>
  dc:	00 00       	nop
			_delay_ms(250);
			PORTC|=(1<<PINC4);//this cause the encoder to be disable 
  de:	ac 9a       	sbi	0x15, 4	; 21
  e0:	4f e9       	ldi	r20, 0x9F	; 159
  e2:	56 e8       	ldi	r21, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	41 50       	subi	r20, 0x01	; 1
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x54>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5e>
  f0:	00 00       	nop
			_delay_ms(250);
			PORTC&=~(1<<PINC4);
  f2:	ac 98       	cbi	0x15, 4	; 21
			PORTC=(passon>>4);//sending higher 4 bit
  f4:	82 95       	swap	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	4f e9       	ldi	r20, 0x9F	; 159
  fc:	56 e8       	ldi	r21, 0x86	; 134
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	41 50       	subi	r20, 0x01	; 1
 102:	50 40       	sbci	r21, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x6e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x78>
 10a:	00 00       	nop
			_delay_ms(250);
			PORTC|=(1<<PINC4);
 10c:	ac 9a       	sbi	0x15, 4	; 21
 10e:	9f e9       	ldi	r25, 0x9F	; 159
 110:	46 e8       	ldi	r20, 0x86	; 134
 112:	51 e0       	ldi	r21, 0x01	; 1
 114:	91 50       	subi	r25, 0x01	; 1
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	50 40       	sbci	r21, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x82>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x8c>
 11e:	00 00       	nop
 DDRC=0xFF;
char value[9]="Madhavsir";
    while (1) 
    {
		char passon;
		for (uint8_t i=0;i<9;i++)
 120:	e2 17       	cp	r30, r18
 122:	f3 07       	cpc	r31, r19
 124:	81 f6       	brne	.-96     	; 0xc6 <main+0x34>
 126:	cd cf       	rjmp	.-102    	; 0xc2 <main+0x30>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
