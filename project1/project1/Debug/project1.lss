
project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000279  00000000  00000000  00000cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f7  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
   DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
   DDRB=0X00;
  70:	17 ba       	out	0x17, r1	; 23
   DDRD =0XFF;
  72:	81 bb       	out	0x11, r24	; 17
   PORTB=0x02;
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	88 bb       	out	0x18, r24	; 24
   PORTC=0x01;
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21
    while (1) 
    {
		PORTD=(1<<PINC2);
  7c:	94 e0       	ldi	r25, 0x04	; 4
				
				PORTC=PORTC;
			}
			else if( PORTC==0x00)
			{
				PORTC=0x01;
  7e:	21 e0       	ldi	r18, 0x01	; 1
   DDRD =0XFF;
   PORTB=0x02;
   PORTC=0x01;
    while (1) 
    {
		PORTD=(1<<PINC2);
  80:	92 bb       	out	0x12, r25	; 18
		if(!(PINB&0x02))
  82:	b1 99       	sbic	0x16, 1	; 22
  84:	05 c0       	rjmp	.+10     	; 0x90 <main+0x24>
		{
			PORTC =(PORTC<<2);
  86:	85 b3       	in	r24, 0x15	; 21
  88:	88 0f       	add	r24, r24
  8a:	88 0f       	add	r24, r24
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	0e c0       	rjmp	.+28     	; 0xac <main+0x40>
		}
		else
		{
			if((PORTC==0x01))
  90:	85 b3       	in	r24, 0x15	; 21
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	19 f4       	brne	.+6      	; 0x9c <main+0x30>
			{
				
				PORTC=PORTC;
  96:	85 b3       	in	r24, 0x15	; 21
  98:	85 bb       	out	0x15, r24	; 21
  9a:	08 c0       	rjmp	.+16     	; 0xac <main+0x40>
			}
			else if( PORTC==0x00)
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	81 11       	cpse	r24, r1
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x3a>
			{
				PORTC=0x01;
  a2:	25 bb       	out	0x15, r18	; 21
  a4:	03 c0       	rjmp	.+6      	; 0xac <main+0x40>
				
			}
			else
			{
				PORTC =PORTC>>1;
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	86 95       	lsr	r24
  aa:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	e3 e2       	ldi	r30, 0x23	; 35
  ae:	f4 ef       	ldi	r31, 0xF4	; 244
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
  b8:	e3 cf       	rjmp	.-58     	; 0x80 <main+0x14>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
